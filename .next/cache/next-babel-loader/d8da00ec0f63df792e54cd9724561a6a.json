{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { Banner, Card, DisplayText, Frame, Form, FormLayout, Layout, Page, PageActions, TextField, Toast } from '@shopify/polaris';\nimport store from 'store-js';\nimport gql from 'graphql-tag';\nimport { Mutation } from 'react-apollo';\nconst UPDATE_PRICE = gql`\n  mutation productVariantUpdate($input: ProductVariantInput!) {\n    productVariantUpdate(input: $input) {\n      product {\n        title\n      }\n      productVariant {\n        id\n        price\n      }\n    }\n  }\n`;\n\nclass EditProduct extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      discount: '',\n      price: '',\n      variantId: '',\n      showToast: false\n    });\n\n    _defineProperty(this, \"handleChange\", field => {\n      return value => this.setState({\n        [field]: value\n      });\n    });\n\n    _defineProperty(this, \"itemToBeConsumed\", () => {\n      const item = store.get('item');\n      const price = item.variants.edges[0].node.price;\n      const variantId = item.variants.edges[0].node.id;\n      const discounter = price * 0.1;\n      this.setState({\n        price,\n        variantId\n      });\n      return (price - discounter).toFixed(2);\n    });\n  }\n\n  componentDidMount() {\n    this.setState({\n      discount: this.itemToBeConsumed()\n    });\n  }\n\n  render() {\n    const {\n      name,\n      price,\n      discount,\n      variantId\n    } = this.state;\n    return /*#__PURE__*/_jsx(Mutation, {\n      mutation: UPDATE_PRICE,\n      children: (handleSubmit, {\n        error,\n        data\n      }) => {\n        const showError = error && /*#__PURE__*/_jsx(Banner, {\n          status: \"critical\",\n          children: error.message\n        });\n\n        const showToast = data && data.productVariantUpdate && /*#__PURE__*/_jsx(Toast, {\n          content: \"Sucessfully updated\",\n          onDismiss: () => this.setState({\n            showToast: false\n          })\n        });\n\n        return /*#__PURE__*/_jsx(Page, {\n          children: /*#__PURE__*/_jsx(Layout, {\n            children: /*#__PURE__*/_jsxs(Layout.Section, {\n              children: [/*#__PURE__*/_jsx(DisplayText, {\n                size: \"large\",\n                children: name\n              }), /*#__PURE__*/_jsxs(Form, {\n                children: [/*#__PURE__*/_jsx(Card, {\n                  sectioned: true,\n                  children: /*#__PURE__*/_jsxs(FormLayout, {\n                    children: [/*#__PURE__*/_jsxs(FormLayout.Group, {\n                      children: [/*#__PURE__*/_jsx(TextField, {\n                        prefix: \"$\",\n                        value: price,\n                        disabled: true,\n                        label: \"Original price\",\n                        type: \"price\"\n                      }), /*#__PURE__*/_jsx(TextField, {\n                        prefix: \"$\",\n                        value: discount,\n                        onChange: this.handleChange('discount'),\n                        label: \"Discounted price\",\n                        type: \"discount\"\n                      })]\n                    }), /*#__PURE__*/_jsx(\"p\", {\n                      children: \"This sale price will expire in two weeks\"\n                    })]\n                  })\n                }), /*#__PURE__*/_jsx(PageActions, {\n                  primaryAction: [{\n                    content: 'Save',\n                    onAction: () => {\n                      const productVariableInput = {\n                        id: variantId,\n                        price: discount\n                      };\n                      handleSubmit({\n                        variables: {\n                          input: productVariableInput\n                        }\n                      });\n                    }\n                  }],\n                  secondaryActions: [{\n                    content: 'Remove discount'\n                  }]\n                })]\n              })]\n            })\n          })\n        });\n      }\n    });\n  }\n\n}\n\nexport default EditProduct;","map":{"version":3,"sources":["/Users/chasebrooks/Documents/CS/shopify-sample-app/pages/edit-products.js"],"names":["React","Banner","Card","DisplayText","Frame","Form","FormLayout","Layout","Page","PageActions","TextField","Toast","store","gql","Mutation","UPDATE_PRICE","EditProduct","Component","discount","price","variantId","showToast","field","value","setState","item","get","variants","edges","node","id","discounter","toFixed","componentDidMount","itemToBeConsumed","render","name","state","handleSubmit","error","data","showError","message","productVariantUpdate","handleChange","content","onAction","productVariableInput","variables","input"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n    Banner,\n    Card,\n    DisplayText,\n    Frame,\n    Form,\n    FormLayout,\n    Layout,\n    Page,\n    PageActions,\n    TextField,\n    Toast\n} from '@shopify/polaris';\nimport store from 'store-js';\nimport gql from 'graphql-tag';\nimport { Mutation } from 'react-apollo';\n\n\nconst UPDATE_PRICE = gql`\n  mutation productVariantUpdate($input: ProductVariantInput!) {\n    productVariantUpdate(input: $input) {\n      product {\n        title\n      }\n      productVariant {\n        id\n        price\n      }\n    }\n  }\n`;\n\n\nclass EditProduct extends React.Component {\n    state = {\n        discount: '',\n        price: '',\n        variantId: '',\n        showToast: false,\n    };\n\n    componentDidMount() {\n        this.setState({ discount: this.itemToBeConsumed() });\n    }\n\n    render() {\n        const { name, price, discount, variantId } = this.state;\n        return (\n            <Mutation\n                mutation={UPDATE_PRICE}\n            >\n                {(handleSubmit, { error, data }) => {\n                    const showError = error && (\n                        <Banner status=\"critical\">{error.message}</Banner>\n                    );\n                    const showToast = data && data.productVariantUpdate && (\n                        <Toast\n                            content=\"Sucessfully updated\"\n                            onDismiss={() => this.setState({ showToast: false })}\n                        />\n                    );\n                    return (\n                        <Page>\n                            <Layout>\n                                <Layout.Section>\n                                    <DisplayText size=\"large\">{name}</DisplayText>\n                                    <Form>\n                                        <Card sectioned>\n                                            <FormLayout>\n                                                <FormLayout.Group>\n                                                    <TextField\n                                                        prefix=\"$\"\n                                                        value={price}\n                                                        disabled={true}\n                                                        label=\"Original price\"\n                                                        type=\"price\"\n                                                    />\n                                                    <TextField\n                                                        prefix=\"$\"\n                                                        value={discount}\n                                                        onChange={this.handleChange('discount')}\n                                                        label=\"Discounted price\"\n                                                        type=\"discount\"\n                                                    />\n                                                </FormLayout.Group>\n                                                <p>\n                                                    This sale price will expire in two weeks\n                    </p>\n                                            </FormLayout>\n                                        </Card>\n                                        <PageActions\n                                            primaryAction={[\n                                                {\n                                                    content: 'Save',\n                                                    onAction: () => {\n                                                        const productVariableInput = {\n                                                            id: variantId,\n                                                            price: discount,\n                                                        };\n                                                        handleSubmit({\n                                                            variables: { input: productVariableInput },\n                                                        });\n                                                    }\n                                                }\n                                            ]}\n                                            secondaryActions={[\n                                                {\n                                                    content: 'Remove discount'\n                                                }\n                                            ]}\n                                        />\n                                    </Form>\n                                </Layout.Section>\n                            </Layout>\n                        </Page>\n                    );\n                }}\n            </Mutation>\n        );\n    }\n\n    handleChange = (field) => {\n        return (value) => this.setState({ [field]: value });\n    };\n\n    itemToBeConsumed = () => {\n        const item = store.get('item');\n        const price = item.variants.edges[0].node.price;\n        const variantId = item.variants.edges[0].node.id;\n        const discounter = price * 0.1;\n        this.setState({ price, variantId });\n        return (price - discounter).toFixed(2);\n    };\n}\n\nexport default EditProduct;"]},"metadata":{},"sourceType":"module"}